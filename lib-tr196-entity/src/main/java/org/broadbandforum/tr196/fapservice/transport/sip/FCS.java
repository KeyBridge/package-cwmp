/*
 * Copyright 2018 Key Bridge.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.broadbandforum.tr196.fapservice.transport.sip;

import java.util.ArrayList;
import java.util.Collection;
import javax.validation.constraints.Size;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlList;
import javax.xml.bind.annotation.XmlRootElement;
import javax.xml.bind.annotation.XmlType;
import org.broadbandforum.annotation.CWMPObject;
import org.broadbandforum.annotation.CWMPParameter;

	/**
	 * This object models SIP Femtocell Convergence Server (FCS) parameters.
	 *
	 * @since 2.0
	 */
@CWMPObject(name = "FAPService.{i}.Transport.SIP.FCS.")
@XmlRootElement(name = "FAPService.Transport.SIP.FCS")
@XmlType(name = "FAPService.Transport.SIP.FCS")
@XmlAccessorType(XmlAccessType.FIELD)
public class FCS {

	/**
	 * The request URI for MESSAGE method sent to Femtocell Convergence Server (FCS). The string MUST contain a URI as defined in {{bibref|RFC3986}}.

The device MUST support SIP URI and MAY support other URI schemes.
	 *
	 * @since 2.0
	 */
	@XmlElement(name = "FCSURI")
	@CWMPParameter(access = "readWrite")
	@Size(max = 256)
	public String fcsURI;
	/**
	 * The request URI for Outgoing Proxy. The string MUST contain a URI as defined in {{bibref|RFC3986}}.

The device MUST support SIP URI and MAY support other URI schemes.
	 *
	 * @since 2.0
	 */
	@XmlElement(name = "OutGoingProxyURI")
	@CWMPParameter(access = "readWrite")
	@Size(max = 256)
	public String outGoingProxyURI;
	/**
	 * This string will be populated as the value for  P-Access-Network-Info header.

This header is generated by the device. See {{bibref|3GPP2-X.S0059}} and {{bibref|RFC3455}}.
	 *
	 * @since 2.0
	 */
	@XmlElement(name = "PAccessNetInfoHeader")
	@Size(max = 256)
	public String paccessNetInfoHeader;
	/**
	 * The FQDN or IP Address representing the Home Domain of the device.

The request URI for REGISTER will be formed by prefixing "sip:" to this value.
	 *
	 * @since 2.0
	 */
	@XmlElement(name = "Realm")
	@CWMPParameter(access = "readWrite")
	@Size(max = 64)
	public String realm;
	/**
	 * The "IP Multimedia Public User" (IMPU) Identity.
	 *
	 * @since 2.0
	 */
	@XmlElement(name = "IMPU")
	@CWMPParameter(access = "readWrite")
	@Size(max = 256)
	public String impU;
	/**
	 * The "IP Multimedia Private Identity" (IMPI).

This value is ignored when {{param|SIPAuthMethod}} is set to {{enum|TNA|SIPAuthMethod}}.
	 *
	 * @since 2.0
	 */
	@XmlElement(name = "IMPI")
	@CWMPParameter(access = "readWrite")
	@Size(max = 256)
	public String impI;
	/**
	 * Password to Authenticate the IMS core.

This value is ignored when {{param|SIPAuthMethod}} is set to {{enum|TNA|SIPAuthMethod}}.
	 *
	 * @since 2.0
	 */
	@XmlElement(name = "SIPPassword")
	@CWMPParameter(access = "readWrite")
	@Size(max = 32)
	public String sipPassword;
	/**
	 * Represents the SIP authentication mechanisms supported by this device.
	 *
	 * @since 2.0
	 */
	@XmlElement(name = "SIPAuthCapability")
	@XmlList
	public Collection<String> sipAuthCapability;
	/**
	 * Represents the authentication method used by this device for SIP registration.

If value is {{enum|SIPDigest}}, the {{param|SIPPassword}} MUST not be {{empty}}.

If value is {{enum|TNA}}, {{param|SIPPassword}} and {{param|IMPI}} are ignored.
	 *
	 * @since 2.0
	 */
	@XmlElement(name = "SIPAuthMethod")
	@CWMPParameter(access = "readWrite")
	@Size(max = 256)
	public String sipAuthMethod;
	/**
	 * Local port number for initiating SIP traffic.
	 *
	 * @since 2.0
	 */
	@XmlElement(name = "SIPLocalPort")
	@CWMPParameter(access = "readWrite")
	@Size(max = 65535)
	public Long sipLocalPort;
	/**
	 * The low limit of port number for originating and receiving RTP/RTCP traffic.
	 *
	 * @since 2.0
	 */
	@XmlElement(name = "RTPPortLowLimit")
	@CWMPParameter(access = "readWrite")
	@Size(max = 65535)
	public Long rtpPortLowLimit;
	/**
	 * The high limit of port number for originating and receiving RTP/RTCP traffic.
	 *
	 * @since 2.0
	 */
	@XmlElement(name = "RTPPortHighLimit")
	@CWMPParameter(access = "readWrite")
	@Size(max = 65535)
	public Long rtpPortHighLimit;
	/**
	 * SIP registration expiry value, as defined in {{bibref|RFC3261}}.
	 *
	 * @since 2.0
	 */
	@XmlElement(name = "SIPRegExpiry")
	@CWMPParameter(access = "readWrite")
	public Long sipRegExpiry;
	/**
	 * SIP session timer expiry value, in seconds, as defined in {{bibref|RFC4028}}.
	 *
	 * @since 2.0
	 */
	@XmlElement(name = "SIPSessionExpiry")
	@CWMPParameter(access = "readWrite", units = "seconds")
	@Size(min = 90)
	public Long sipSessionExpiry = 1800L;
	/**
	 * Indicates the dialed digit pattern matching strings used to determine if the call is an emergency call that MAY bypass access control and receive priority treatment.
	 *
	 * @since 2.0
	 */
	@XmlElement(name = "EmergencyNumbersList")
	@CWMPParameter(access = "readWrite")
	@XmlList
	public Collection<String> emergencyNumbersList;
	/**
	 * Value of SIP timer T1, in milliseconds, as defined in {{bibref|RFC3261}}.
	 *
	 * @since 2.0
	 */
	@XmlElement(name = "TimerT1")
	@CWMPParameter(access = "readWrite", units = "milliseconds")
	@Size(min = 1)
	public Long timerT1;
	/**
	 * Value of SIP timer T2, in milliseconds, as defined in {{bibref|RFC3261}}.
	 *
	 * @since 2.0
	 */
	@XmlElement(name = "TimerT2")
	@CWMPParameter(access = "readWrite", units = "milliseconds")
	@Size(min = 1)
	public Long timerT2;
	/**
	 * Value of SIP timer T4, in milliseconds, as defined in {{bibref|RFC3261}}.
	 *
	 * @since 2.0
	 */
	@XmlElement(name = "TimerT4")
	@CWMPParameter(access = "readWrite", units = "milliseconds")
	@Size(min = 1)
	public Long timerT4;
	/**
	 * This value specifies how much time to wait, in seconds, before time out on location update accept/reject. See {{bibref|3GPP2-A.S0014}}.
	 *
	 * @since 2.0
	 */
	@XmlElement(name = "T3210")
	@CWMPParameter(access = "readWrite", units = "seconds")
	@Size(min = 1, max = 20)
	public Long t3210;

	public FCS() {
	}

	//<editor-fold defaultstate="collapsed" desc="Getter and Setter">
	/**
	 * Get the request URI for MESSAGE method sent to Femtocell Convergence Server (FCS). The string MUST contain a URI as defined in {{bibref|RFC3986}}.

The device MUST support SIP URI and MAY support other URI schemes.
	 *
	 * @since 2.0
	 * @return the value
	 */
	public String getFcsURI() {
		return fcsURI;
	}

	/**
	 * Set the request URI for MESSAGE method sent to Femtocell Convergence Server (FCS). The string MUST contain a URI as defined in {{bibref|RFC3986}}.

The device MUST support SIP URI and MAY support other URI schemes.
	 *
	 * @since 2.0
	 * @param fcsURI the input value
	 */
	public void  setFcsURI(String fcsURI) {
		this.fcsURI = fcsURI;
	}

	/**
	 * Set the request URI for MESSAGE method sent to Femtocell Convergence Server (FCS). The string MUST contain a URI as defined in {{bibref|RFC3986}}.

The device MUST support SIP URI and MAY support other URI schemes.
	 *
	 * @since 2.0
	 * @param fcsURI the input value
	 * @return this instance
	 */
	public FCS withFcsURI(String fcsURI) {
		this.fcsURI = fcsURI;
		return this;
	}

	/**
	 * Get the request URI for Outgoing Proxy. The string MUST contain a URI as defined in {{bibref|RFC3986}}.

The device MUST support SIP URI and MAY support other URI schemes.
	 *
	 * @since 2.0
	 * @return the value
	 */
	public String getOutGoingProxyURI() {
		return outGoingProxyURI;
	}

	/**
	 * Set the request URI for Outgoing Proxy. The string MUST contain a URI as defined in {{bibref|RFC3986}}.

The device MUST support SIP URI and MAY support other URI schemes.
	 *
	 * @since 2.0
	 * @param outGoingProxyURI the input value
	 */
	public void  setOutGoingProxyURI(String outGoingProxyURI) {
		this.outGoingProxyURI = outGoingProxyURI;
	}

	/**
	 * Set the request URI for Outgoing Proxy. The string MUST contain a URI as defined in {{bibref|RFC3986}}.

The device MUST support SIP URI and MAY support other URI schemes.
	 *
	 * @since 2.0
	 * @param outGoingProxyURI the input value
	 * @return this instance
	 */
	public FCS withOutGoingProxyURI(String outGoingProxyURI) {
		this.outGoingProxyURI = outGoingProxyURI;
		return this;
	}

	/**
	 * Get the this string will be populated as the value for  P-Access-Network-Info header.

This header is generated by the device. See {{bibref|3GPP2-X.S0059}} and {{bibref|RFC3455}}.
	 *
	 * @since 2.0
	 * @return the value
	 */
	public String getPaccessNetInfoHeader() {
		return paccessNetInfoHeader;
	}

	/**
	 * Set the this string will be populated as the value for  P-Access-Network-Info header.

This header is generated by the device. See {{bibref|3GPP2-X.S0059}} and {{bibref|RFC3455}}.
	 *
	 * @since 2.0
	 * @param paccessNetInfoHeader the input value
	 */
	public void  setPaccessNetInfoHeader(String paccessNetInfoHeader) {
		this.paccessNetInfoHeader = paccessNetInfoHeader;
	}

	/**
	 * Set the this string will be populated as the value for  P-Access-Network-Info header.

This header is generated by the device. See {{bibref|3GPP2-X.S0059}} and {{bibref|RFC3455}}.
	 *
	 * @since 2.0
	 * @param paccessNetInfoHeader the input value
	 * @return this instance
	 */
	public FCS withPaccessNetInfoHeader(String paccessNetInfoHeader) {
		this.paccessNetInfoHeader = paccessNetInfoHeader;
		return this;
	}

	/**
	 * Get the FQDN or IP Address representing the Home Domain of the device.

The request URI for REGISTER will be formed by prefixing "sip:" to this value.
	 *
	 * @since 2.0
	 * @return the value
	 */
	public String getRealm() {
		return realm;
	}

	/**
	 * Set the FQDN or IP Address representing the Home Domain of the device.

The request URI for REGISTER will be formed by prefixing "sip:" to this value.
	 *
	 * @since 2.0
	 * @param realm the input value
	 */
	public void  setRealm(String realm) {
		this.realm = realm;
	}

	/**
	 * Set the FQDN or IP Address representing the Home Domain of the device.

The request URI for REGISTER will be formed by prefixing "sip:" to this value.
	 *
	 * @since 2.0
	 * @param realm the input value
	 * @return this instance
	 */
	public FCS withRealm(String realm) {
		this.realm = realm;
		return this;
	}

	/**
	 * Get the "IP Multimedia Public User" (IMPU) Identity.
	 *
	 * @since 2.0
	 * @return the value
	 */
	public String getImpU() {
		return impU;
	}

	/**
	 * Set the "IP Multimedia Public User" (IMPU) Identity.
	 *
	 * @since 2.0
	 * @param impU the input value
	 */
	public void  setImpU(String impU) {
		this.impU = impU;
	}

	/**
	 * Set the "IP Multimedia Public User" (IMPU) Identity.
	 *
	 * @since 2.0
	 * @param impU the input value
	 * @return this instance
	 */
	public FCS withImpU(String impU) {
		this.impU = impU;
		return this;
	}

	/**
	 * Get the "IP Multimedia Private Identity" (IMPI).

This value is ignored when {{param|SIPAuthMethod}} is set to {{enum|TNA|SIPAuthMethod}}.
	 *
	 * @since 2.0
	 * @return the value
	 */
	public String getImpI() {
		return impI;
	}

	/**
	 * Set the "IP Multimedia Private Identity" (IMPI).

This value is ignored when {{param|SIPAuthMethod}} is set to {{enum|TNA|SIPAuthMethod}}.
	 *
	 * @since 2.0
	 * @param impI the input value
	 */
	public void  setImpI(String impI) {
		this.impI = impI;
	}

	/**
	 * Set the "IP Multimedia Private Identity" (IMPI).

This value is ignored when {{param|SIPAuthMethod}} is set to {{enum|TNA|SIPAuthMethod}}.
	 *
	 * @since 2.0
	 * @param impI the input value
	 * @return this instance
	 */
	public FCS withImpI(String impI) {
		this.impI = impI;
		return this;
	}

	/**
	 * Get the password to Authenticate the IMS core.

This value is ignored when {{param|SIPAuthMethod}} is set to {{enum|TNA|SIPAuthMethod}}.
	 *
	 * @since 2.0
	 * @return the value
	 */
	public String getSipPassword() {
		return sipPassword;
	}

	/**
	 * Set the password to Authenticate the IMS core.

This value is ignored when {{param|SIPAuthMethod}} is set to {{enum|TNA|SIPAuthMethod}}.
	 *
	 * @since 2.0
	 * @param sipPassword the input value
	 */
	public void  setSipPassword(String sipPassword) {
		this.sipPassword = sipPassword;
	}

	/**
	 * Set the password to Authenticate the IMS core.

This value is ignored when {{param|SIPAuthMethod}} is set to {{enum|TNA|SIPAuthMethod}}.
	 *
	 * @since 2.0
	 * @param sipPassword the input value
	 * @return this instance
	 */
	public FCS withSipPassword(String sipPassword) {
		this.sipPassword = sipPassword;
		return this;
	}

	/**
	 * Get the represents the SIP authentication mechanisms supported by this device.
	 *
	 * @since 2.0
	 * @return the value
	 */
	public Collection<String> getSipAuthCapability() {
		if (this.sipAuthCapability == null){ this.sipAuthCapability=new ArrayList<>();}
		return sipAuthCapability;
	}

	/**
	 * Set the represents the SIP authentication mechanisms supported by this device.
	 *
	 * @since 2.0
	 * @param sipAuthCapability the input value
	 */
	public void  setSipAuthCapability(Collection<String> sipAuthCapability) {
		this.sipAuthCapability = sipAuthCapability;
	}

	/**
	 * Set the represents the SIP authentication mechanisms supported by this device.
	 *
	 * @since 2.0
	 * @param string the input value
	 * @return this instance
	 */
	public FCS withSipAuthCapability(String string) {
		getSipAuthCapability().add(string);
		return this;
	}

	/**
	 * Get the represents the authentication method used by this device for SIP registration.

If value is {{enum|SIPDigest}}, the {{param|SIPPassword}} MUST not be {{empty}}.

If value is {{enum|TNA}}, {{param|SIPPassword}} and {{param|IMPI}} are ignored.
	 *
	 * @since 2.0
	 * @return the value
	 */
	public String getSipAuthMethod() {
		return sipAuthMethod;
	}

	/**
	 * Set the represents the authentication method used by this device for SIP registration.

If value is {{enum|SIPDigest}}, the {{param|SIPPassword}} MUST not be {{empty}}.

If value is {{enum|TNA}}, {{param|SIPPassword}} and {{param|IMPI}} are ignored.
	 *
	 * @since 2.0
	 * @param sipAuthMethod the input value
	 */
	public void  setSipAuthMethod(String sipAuthMethod) {
		this.sipAuthMethod = sipAuthMethod;
	}

	/**
	 * Set the represents the authentication method used by this device for SIP registration.

If value is {{enum|SIPDigest}}, the {{param|SIPPassword}} MUST not be {{empty}}.

If value is {{enum|TNA}}, {{param|SIPPassword}} and {{param|IMPI}} are ignored.
	 *
	 * @since 2.0
	 * @param sipAuthMethod the input value
	 * @return this instance
	 */
	public FCS withSipAuthMethod(String sipAuthMethod) {
		this.sipAuthMethod = sipAuthMethod;
		return this;
	}

	/**
	 * Get the local port number for initiating SIP traffic.
	 *
	 * @since 2.0
	 * @return the value
	 */
	public Long getSipLocalPort() {
		return sipLocalPort;
	}

	/**
	 * Set the local port number for initiating SIP traffic.
	 *
	 * @since 2.0
	 * @param sipLocalPort the input value
	 */
	public void  setSipLocalPort(Long sipLocalPort) {
		this.sipLocalPort = sipLocalPort;
	}

	/**
	 * Set the local port number for initiating SIP traffic.
	 *
	 * @since 2.0
	 * @param sipLocalPort the input value
	 * @return this instance
	 */
	public FCS withSipLocalPort(Long sipLocalPort) {
		this.sipLocalPort = sipLocalPort;
		return this;
	}

	/**
	 * Get the low limit of port number for originating and receiving RTP/RTCP traffic.
	 *
	 * @since 2.0
	 * @return the value
	 */
	public Long getRtpPortLowLimit() {
		return rtpPortLowLimit;
	}

	/**
	 * Set the low limit of port number for originating and receiving RTP/RTCP traffic.
	 *
	 * @since 2.0
	 * @param rtpPortLowLimit the input value
	 */
	public void  setRtpPortLowLimit(Long rtpPortLowLimit) {
		this.rtpPortLowLimit = rtpPortLowLimit;
	}

	/**
	 * Set the low limit of port number for originating and receiving RTP/RTCP traffic.
	 *
	 * @since 2.0
	 * @param rtpPortLowLimit the input value
	 * @return this instance
	 */
	public FCS withRtpPortLowLimit(Long rtpPortLowLimit) {
		this.rtpPortLowLimit = rtpPortLowLimit;
		return this;
	}

	/**
	 * Get the high limit of port number for originating and receiving RTP/RTCP traffic.
	 *
	 * @since 2.0
	 * @return the value
	 */
	public Long getRtpPortHighLimit() {
		return rtpPortHighLimit;
	}

	/**
	 * Set the high limit of port number for originating and receiving RTP/RTCP traffic.
	 *
	 * @since 2.0
	 * @param rtpPortHighLimit the input value
	 */
	public void  setRtpPortHighLimit(Long rtpPortHighLimit) {
		this.rtpPortHighLimit = rtpPortHighLimit;
	}

	/**
	 * Set the high limit of port number for originating and receiving RTP/RTCP traffic.
	 *
	 * @since 2.0
	 * @param rtpPortHighLimit the input value
	 * @return this instance
	 */
	public FCS withRtpPortHighLimit(Long rtpPortHighLimit) {
		this.rtpPortHighLimit = rtpPortHighLimit;
		return this;
	}

	/**
	 * Get the sip registration expiry value, as defined in {{bibref|RFC3261}}.
	 *
	 * @since 2.0
	 * @return the value
	 */
	public Long getSipRegExpiry() {
		return sipRegExpiry;
	}

	/**
	 * Set the sip registration expiry value, as defined in {{bibref|RFC3261}}.
	 *
	 * @since 2.0
	 * @param sipRegExpiry the input value
	 */
	public void  setSipRegExpiry(Long sipRegExpiry) {
		this.sipRegExpiry = sipRegExpiry;
	}

	/**
	 * Set the sip registration expiry value, as defined in {{bibref|RFC3261}}.
	 *
	 * @since 2.0
	 * @param sipRegExpiry the input value
	 * @return this instance
	 */
	public FCS withSipRegExpiry(Long sipRegExpiry) {
		this.sipRegExpiry = sipRegExpiry;
		return this;
	}

	/**
	 * Get the sip session timer expiry value, in seconds, as defined in {{bibref|RFC4028}}.
	 *
	 * @since 2.0
	 * @return the value
	 */
	public Long getSipSessionExpiry() {
		return sipSessionExpiry;
	}

	/**
	 * Set the sip session timer expiry value, in seconds, as defined in {{bibref|RFC4028}}.
	 *
	 * @since 2.0
	 * @param sipSessionExpiry the input value
	 */
	public void  setSipSessionExpiry(Long sipSessionExpiry) {
		this.sipSessionExpiry = sipSessionExpiry;
	}

	/**
	 * Set the sip session timer expiry value, in seconds, as defined in {{bibref|RFC4028}}.
	 *
	 * @since 2.0
	 * @param sipSessionExpiry the input value
	 * @return this instance
	 */
	public FCS withSipSessionExpiry(Long sipSessionExpiry) {
		this.sipSessionExpiry = sipSessionExpiry;
		return this;
	}

	/**
	 * Get the indicates the dialed digit pattern matching strings used to determine if the call is an emergency call that MAY bypass access control and receive priority treatment.
	 *
	 * @since 2.0
	 * @return the value
	 */
	public Collection<String> getEmergencyNumbersList() {
		if (this.emergencyNumbersList == null){ this.emergencyNumbersList=new ArrayList<>();}
		return emergencyNumbersList;
	}

	/**
	 * Set the indicates the dialed digit pattern matching strings used to determine if the call is an emergency call that MAY bypass access control and receive priority treatment.
	 *
	 * @since 2.0
	 * @param emergencyNumbersList the input value
	 */
	public void  setEmergencyNumbersList(Collection<String> emergencyNumbersList) {
		this.emergencyNumbersList = emergencyNumbersList;
	}

	/**
	 * Set the indicates the dialed digit pattern matching strings used to determine if the call is an emergency call that MAY bypass access control and receive priority treatment.
	 *
	 * @since 2.0
	 * @param string the input value
	 * @return this instance
	 */
	public FCS withEmergencyNumbersList(String string) {
		getEmergencyNumbersList().add(string);
		return this;
	}

	/**
	 * Get the value of SIP timer T1, in milliseconds, as defined in {{bibref|RFC3261}}.
	 *
	 * @since 2.0
	 * @return the value
	 */
	public Long getTimerT1() {
		return timerT1;
	}

	/**
	 * Set the value of SIP timer T1, in milliseconds, as defined in {{bibref|RFC3261}}.
	 *
	 * @since 2.0
	 * @param timerT1 the input value
	 */
	public void  setTimerT1(Long timerT1) {
		this.timerT1 = timerT1;
	}

	/**
	 * Set the value of SIP timer T1, in milliseconds, as defined in {{bibref|RFC3261}}.
	 *
	 * @since 2.0
	 * @param timerT1 the input value
	 * @return this instance
	 */
	public FCS withTimerT1(Long timerT1) {
		this.timerT1 = timerT1;
		return this;
	}

	/**
	 * Get the value of SIP timer T2, in milliseconds, as defined in {{bibref|RFC3261}}.
	 *
	 * @since 2.0
	 * @return the value
	 */
	public Long getTimerT2() {
		return timerT2;
	}

	/**
	 * Set the value of SIP timer T2, in milliseconds, as defined in {{bibref|RFC3261}}.
	 *
	 * @since 2.0
	 * @param timerT2 the input value
	 */
	public void  setTimerT2(Long timerT2) {
		this.timerT2 = timerT2;
	}

	/**
	 * Set the value of SIP timer T2, in milliseconds, as defined in {{bibref|RFC3261}}.
	 *
	 * @since 2.0
	 * @param timerT2 the input value
	 * @return this instance
	 */
	public FCS withTimerT2(Long timerT2) {
		this.timerT2 = timerT2;
		return this;
	}

	/**
	 * Get the value of SIP timer T4, in milliseconds, as defined in {{bibref|RFC3261}}.
	 *
	 * @since 2.0
	 * @return the value
	 */
	public Long getTimerT4() {
		return timerT4;
	}

	/**
	 * Set the value of SIP timer T4, in milliseconds, as defined in {{bibref|RFC3261}}.
	 *
	 * @since 2.0
	 * @param timerT4 the input value
	 */
	public void  setTimerT4(Long timerT4) {
		this.timerT4 = timerT4;
	}

	/**
	 * Set the value of SIP timer T4, in milliseconds, as defined in {{bibref|RFC3261}}.
	 *
	 * @since 2.0
	 * @param timerT4 the input value
	 * @return this instance
	 */
	public FCS withTimerT4(Long timerT4) {
		this.timerT4 = timerT4;
		return this;
	}

	/**
	 * Get the this value specifies how much time to wait, in seconds, before time out on location update accept/reject. See {{bibref|3GPP2-A.S0014}}.
	 *
	 * @since 2.0
	 * @return the value
	 */
	public Long getT3210() {
		return t3210;
	}

	/**
	 * Set the this value specifies how much time to wait, in seconds, before time out on location update accept/reject. See {{bibref|3GPP2-A.S0014}}.
	 *
	 * @since 2.0
	 * @param t3210 the input value
	 */
	public void  setT3210(Long t3210) {
		this.t3210 = t3210;
	}

	/**
	 * Set the this value specifies how much time to wait, in seconds, before time out on location update accept/reject. See {{bibref|3GPP2-A.S0014}}.
	 *
	 * @since 2.0
	 * @param t3210 the input value
	 * @return this instance
	 */
	public FCS withT3210(Long t3210) {
		this.t3210 = t3210;
		return this;
	}

	//</editor-fold>

}