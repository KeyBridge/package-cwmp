/*
 * Copyright 2018 Key Bridge.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.broadbandforum.tr196.fapservice.rem.lte;

import javax.validation.constraints.Size;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlRootElement;
import javax.xml.bind.annotation.XmlType;
import org.broadbandforum.annotation.CWMPObject;
import org.broadbandforum.annotation.CWMPParameter;
import org.broadbandforum.tr196.datatypes.Alias;

	/**
	 * Table indicating the measurement of the discovered carrier. The information stored in this object is strictly in the physical layer level and may not necessarily be associated with any particular E-UTRAN cell (e.g. interference level generated by sources other than E-UTRAN cell).
	 *
	 * @since 2.0
	 */
@CWMPObject(name = "FAPService.{i}.REM.LTE.CarrierMeas.{i}.")
@XmlRootElement(name = "CarrierMeas")
@XmlType(name = "FAPService.REM.LTE.CarrierMeas")
@XmlAccessorType(XmlAccessType.FIELD)
public class CarrierMeas {

	/**
	 * Enables or disables the CarrierMeas entry.
	 *
	 * @since 2.0
	 */
	@XmlElement(name = "Enable")
	@CWMPParameter(access = "readWrite")
	public Boolean enable = false;
	/**
	 * {{datatype|expand}}
	 *
	 * @since 2.0
	 */
	@XmlElement(name = "Alias")
	@CWMPParameter(access = "readWrite")
	public Alias alias;
	/**
	 * Lower bound of the EUTRA ARFCN as specified in {{bibref|3GPP-TS.36.101|Section 5.7.3}} in the DL direction that  is requested to measure. Unit in MHz.
	 *
	 * @since 2.0
	 */
	@XmlElement(name = "CarrierARFCNDL")
	@CWMPParameter(access = "readWrite", units = "MHz")
	@Size(max = 65535)
	public Integer carrierARFCNDL;
	/**
	 * Number of ARFCN in DL direction, as specified in {{bibref|3GPP-TS.36.101|Section 5.6}}, that  is requested to measure. The range bounded by {{param|CarrierARFCNDL}} as the lower bound  and the value of ({{param|CarrierARFCNDL}} + {{param}}) as the upper bound expresses the total carrier frequency range to be measured.
	 *
	 * @since 2.0
	 */
	@XmlElement(name = "CarrierChWidth")
	@CWMPParameter(access = "readWrite", units = "ARFCN")
	@Size(max = 750)
	public Integer carrierChWidth;
	/**
	 * Received Signal Strength Indicator (RSSI) as specified in {{bibref|3GPP-TS.36.214|Sec 5.1.3}} over the carrier frequency range from {{param|CarrierARFCNDL}} as the lower bound  and the value of ({{param|CarrierARFCNDL}} + {{param|CarrierChWidth}}) as the upper bound.
	 *
	 * @since 2.0
	 */
	@XmlElement(name = "CarrierRSSI")
	@Size(min = -100, max = -25)
	public Integer carrierRSSI;

	public CarrierMeas() {
	}

	//<editor-fold defaultstate="collapsed" desc="Getter and Setter">
	/**
	 * Get the enables or disables the CarrierMeas entry.
	 *
	 * @since 2.0
	 * @return the value
	 */
	public Boolean isEnable() {
		return enable;
	}

	/**
	 * Set the enables or disables the CarrierMeas entry.
	 *
	 * @since 2.0
	 * @param enable the input value
	 */
	public void  setEnable(Boolean enable) {
		this.enable = enable;
	}

	/**
	 * Set the enables or disables the CarrierMeas entry.
	 *
	 * @since 2.0
	 * @param enable the input value
	 * @return this instance
	 */
	public CarrierMeas withEnable(Boolean enable) {
		this.enable = enable;
		return this;
	}

	/**
	 * Get the {{datatype|expand}}
	 *
	 * @since 2.0
	 * @return the value
	 */
	public Alias getAlias() {
		return alias;
	}

	/**
	 * Set the {{datatype|expand}}
	 *
	 * @since 2.0
	 * @param alias the input value
	 */
	public void  setAlias(Alias alias) {
		this.alias = alias;
	}

	/**
	 * Set the {{datatype|expand}}
	 *
	 * @since 2.0
	 * @param alias the input value
	 * @return this instance
	 */
	public CarrierMeas withAlias(Alias alias) {
		this.alias = alias;
		return this;
	}

	/**
	 * Get the lower bound of the EUTRA ARFCN as specified in {{bibref|3GPP-TS.36.101|Section 5.7.3}} in the DL direction that  is requested to measure. Unit in MHz.
	 *
	 * @since 2.0
	 * @return the value
	 */
	public Integer getCarrierARFCNDL() {
		return carrierARFCNDL;
	}

	/**
	 * Set the lower bound of the EUTRA ARFCN as specified in {{bibref|3GPP-TS.36.101|Section 5.7.3}} in the DL direction that  is requested to measure. Unit in MHz.
	 *
	 * @since 2.0
	 * @param carrierARFCNDL the input value
	 */
	public void  setCarrierARFCNDL(Integer carrierARFCNDL) {
		this.carrierARFCNDL = carrierARFCNDL;
	}

	/**
	 * Set the lower bound of the EUTRA ARFCN as specified in {{bibref|3GPP-TS.36.101|Section 5.7.3}} in the DL direction that  is requested to measure. Unit in MHz.
	 *
	 * @since 2.0
	 * @param carrierARFCNDL the input value
	 * @return this instance
	 */
	public CarrierMeas withCarrierARFCNDL(Integer carrierARFCNDL) {
		this.carrierARFCNDL = carrierARFCNDL;
		return this;
	}

	/**
	 * Get the number of ARFCN in DL direction, as specified in {{bibref|3GPP-TS.36.101|Section 5.6}}, that  is requested to measure. The range bounded by {{param|CarrierARFCNDL}} as the lower bound  and the value of ({{param|CarrierARFCNDL}} + {{param}}) as the upper bound expresses the total carrier frequency range to be measured.
	 *
	 * @since 2.0
	 * @return the value
	 */
	public Integer getCarrierChWidth() {
		return carrierChWidth;
	}

	/**
	 * Set the number of ARFCN in DL direction, as specified in {{bibref|3GPP-TS.36.101|Section 5.6}}, that  is requested to measure. The range bounded by {{param|CarrierARFCNDL}} as the lower bound  and the value of ({{param|CarrierARFCNDL}} + {{param}}) as the upper bound expresses the total carrier frequency range to be measured.
	 *
	 * @since 2.0
	 * @param carrierChWidth the input value
	 */
	public void  setCarrierChWidth(Integer carrierChWidth) {
		this.carrierChWidth = carrierChWidth;
	}

	/**
	 * Set the number of ARFCN in DL direction, as specified in {{bibref|3GPP-TS.36.101|Section 5.6}}, that  is requested to measure. The range bounded by {{param|CarrierARFCNDL}} as the lower bound  and the value of ({{param|CarrierARFCNDL}} + {{param}}) as the upper bound expresses the total carrier frequency range to be measured.
	 *
	 * @since 2.0
	 * @param carrierChWidth the input value
	 * @return this instance
	 */
	public CarrierMeas withCarrierChWidth(Integer carrierChWidth) {
		this.carrierChWidth = carrierChWidth;
		return this;
	}

	/**
	 * Get the received Signal Strength Indicator (RSSI) as specified in {{bibref|3GPP-TS.36.214|Sec 5.1.3}} over the carrier frequency range from {{param|CarrierARFCNDL}} as the lower bound  and the value of ({{param|CarrierARFCNDL}} + {{param|CarrierChWidth}}) as the upper bound.
	 *
	 * @since 2.0
	 * @return the value
	 */
	public Integer getCarrierRSSI() {
		return carrierRSSI;
	}

	/**
	 * Set the received Signal Strength Indicator (RSSI) as specified in {{bibref|3GPP-TS.36.214|Sec 5.1.3}} over the carrier frequency range from {{param|CarrierARFCNDL}} as the lower bound  and the value of ({{param|CarrierARFCNDL}} + {{param|CarrierChWidth}}) as the upper bound.
	 *
	 * @since 2.0
	 * @param carrierRSSI the input value
	 */
	public void  setCarrierRSSI(Integer carrierRSSI) {
		this.carrierRSSI = carrierRSSI;
	}

	/**
	 * Set the received Signal Strength Indicator (RSSI) as specified in {{bibref|3GPP-TS.36.214|Sec 5.1.3}} over the carrier frequency range from {{param|CarrierARFCNDL}} as the lower bound  and the value of ({{param|CarrierARFCNDL}} + {{param|CarrierChWidth}}) as the upper bound.
	 *
	 * @since 2.0
	 * @param carrierRSSI the input value
	 * @return this instance
	 */
	public CarrierMeas withCarrierRSSI(Integer carrierRSSI) {
		this.carrierRSSI = carrierRSSI;
		return this;
	}

	//</editor-fold>

}