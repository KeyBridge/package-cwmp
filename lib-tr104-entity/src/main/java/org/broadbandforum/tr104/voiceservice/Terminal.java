/*
 * Copyright 2018 Key Bridge.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.broadbandforum.tr104.voiceservice;

import java.util.ArrayList;
import java.util.Collection;
import javax.validation.constraints.Size;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlElementWrapper;
import org.broadbandforum.annotation.CWMPObject;
import org.broadbandforum.annotation.CWMPParameter;
import org.broadbandforum.tr104.datatypes.Alias;
import org.broadbandforum.tr104.voiceservice.terminal.Audio;
import org.broadbandforum.tr104.voiceservice.terminal.ButtonMap;
import org.broadbandforum.tr104.voiceservice.terminal.DiagTests;
import org.broadbandforum.tr104.voiceservice.terminal.Ringer;

	/**
	 * This object models a telephony terminal, each object in the table represents an end-user interface.

This object has to be used when the CPE is a voice endpoint itself.
	 *
	 * @since 2.0
	 */
@CWMPObject(name = "VoiceService.{i}.Terminal.{i}.")
public class Terminal {

	/**
	 * Enables or disables this terminal.
	 *
	 * @since 2.0
	 */
	@XmlElement(name = "Enable")
	@CWMPParameter(access = "readWrite")
	public Boolean enable;
	/**
	 * If {{true}}, when {{param|Enable}} is set to {{false}} in-progress sessions remain intact, but no new sessions are allowed. When all sessions are terminated, the {{object}} is disabled.
	 *
	 * @since 2.0
	 */
	@XmlElement(name = "QuiescentMode")
	@CWMPParameter(access = "readWrite")
	public Boolean quiescentMode;
	/**
	 * Indicates the status of this terminal.
	 *
	 * @since 2.0
	 */
	@XmlElement(name = "Status")
	public String status;
	/**
	 * {{datatype|expand}}
	 *
	 * @since 2.0
	 */
	@XmlElement(name = "Alias")
	@CWMPParameter(access = "readWrite", activeNotify = "canDeny")
	public Alias alias;
	/**
	 * Reference to the {{object|.Tone.EventProfile}} to use with this terminal. If this parameter is {{empty}}, the value of {{param|.Tone.DefautEventProfile}} is used instead.
	 *
	 * @since 2.0
	 */
	@XmlElement(name = "ToneEventProfile")
	@CWMPParameter(access = "readWrite")
	@Size(max = 256)
	public String toneEventProfile;
	/**
	 * This object models the audio outputs of a telephony terminal.(ex. Handset, handsfree, ...)
	 */
	@XmlElementWrapper(name = "audios")
	@XmlElement(name = "Audio")
	@CWMPParameter(minEntries = 1)
	public Collection<Audio> audios;
	/**
	 * This object is provided to permit the purpose of the CPE buttons and function keys to be defined via the ACS.

Support of this object is appropriate only for a device that has programmable buttons in its user interface.
	 */
	@XmlElement(name = "ButtonMap")
	public ButtonMap buttonMap;
	/**
	 * This object defines the ring sequences that may be generated by the terminal.
	 */
	@XmlElement(name = "Ringer")
	public Ringer ringer;
	/**
	 * Terminal level tests.
	 */
	@XmlElement(name = "DiagTests")
	public DiagTests diagTests;

	public Terminal() {
	}

	//<editor-fold defaultstate="collapsed" desc="Getter and Setter">
	/**
	 * Get the enables or disables this terminal.
	 *
	 * @since 2.0
	 * @return the value
	 */
	public Boolean isEnable() {
		return enable;
	}

	/**
	 * Set the enables or disables this terminal.
	 *
	 * @since 2.0
	 * @param enable the input value
	 */
	public void  setEnable(Boolean enable) {
		this.enable = enable;
	}

	/**
	 * Set the enables or disables this terminal.
	 *
	 * @since 2.0
	 * @param enable the input value
	 * @return this instance
	 */
	public Terminal withEnable(Boolean enable) {
		this.enable = enable;
		return this;
	}

	/**
	 * Get the if {{true}}, when {{param|Enable}} is set to {{false}} in-progress sessions remain intact, but no new sessions are allowed. When all sessions are terminated, the {{object}} is disabled.
	 *
	 * @since 2.0
	 * @return the value
	 */
	public Boolean isQuiescentMode() {
		return quiescentMode;
	}

	/**
	 * Set the if {{true}}, when {{param|Enable}} is set to {{false}} in-progress sessions remain intact, but no new sessions are allowed. When all sessions are terminated, the {{object}} is disabled.
	 *
	 * @since 2.0
	 * @param quiescentMode the input value
	 */
	public void  setQuiescentMode(Boolean quiescentMode) {
		this.quiescentMode = quiescentMode;
	}

	/**
	 * Set the if {{true}}, when {{param|Enable}} is set to {{false}} in-progress sessions remain intact, but no new sessions are allowed. When all sessions are terminated, the {{object}} is disabled.
	 *
	 * @since 2.0
	 * @param quiescentMode the input value
	 * @return this instance
	 */
	public Terminal withQuiescentMode(Boolean quiescentMode) {
		this.quiescentMode = quiescentMode;
		return this;
	}

	/**
	 * Get the indicates the status of this terminal.
	 *
	 * @since 2.0
	 * @return the value
	 */
	public String getStatus() {
		return status;
	}

	/**
	 * Set the indicates the status of this terminal.
	 *
	 * @since 2.0
	 * @param status the input value
	 */
	public void  setStatus(String status) {
		this.status = status;
	}

	/**
	 * Set the indicates the status of this terminal.
	 *
	 * @since 2.0
	 * @param status the input value
	 * @return this instance
	 */
	public Terminal withStatus(String status) {
		this.status = status;
		return this;
	}

	/**
	 * Get the {{datatype|expand}}
	 *
	 * @since 2.0
	 * @return the value
	 */
	public Alias getAlias() {
		return alias;
	}

	/**
	 * Set the {{datatype|expand}}
	 *
	 * @since 2.0
	 * @param alias the input value
	 */
	public void  setAlias(Alias alias) {
		this.alias = alias;
	}

	/**
	 * Set the {{datatype|expand}}
	 *
	 * @since 2.0
	 * @param alias the input value
	 * @return this instance
	 */
	public Terminal withAlias(Alias alias) {
		this.alias = alias;
		return this;
	}

	/**
	 * Get the reference to the {{object|.Tone.EventProfile}} to use with this terminal. If this parameter is {{empty}}, the value of {{param|.Tone.DefautEventProfile}} is used instead.
	 *
	 * @since 2.0
	 * @return the value
	 */
	public String getToneEventProfile() {
		return toneEventProfile;
	}

	/**
	 * Set the reference to the {{object|.Tone.EventProfile}} to use with this terminal. If this parameter is {{empty}}, the value of {{param|.Tone.DefautEventProfile}} is used instead.
	 *
	 * @since 2.0
	 * @param toneEventProfile the input value
	 */
	public void  setToneEventProfile(String toneEventProfile) {
		this.toneEventProfile = toneEventProfile;
	}

	/**
	 * Set the reference to the {{object|.Tone.EventProfile}} to use with this terminal. If this parameter is {{empty}}, the value of {{param|.Tone.DefautEventProfile}} is used instead.
	 *
	 * @since 2.0
	 * @param toneEventProfile the input value
	 * @return this instance
	 */
	public Terminal withToneEventProfile(String toneEventProfile) {
		this.toneEventProfile = toneEventProfile;
		return this;
	}

	/**
	 * Get the this object models the audio outputs of a telephony terminal.(ex. Handset, handsfree, ...)
	 *
	 * @return the value
	 */
	public Collection<Audio> getAudios() {
		if (this.audios == null){ this.audios=new ArrayList<>();}
		return audios;
	}

	/**
	 * Set the this object models the audio outputs of a telephony terminal.(ex. Handset, handsfree, ...)
	 *
	 * @param audios the input value
	 */
	public void  setAudios(Collection<Audio> audios) {
		this.audios = audios;
	}

	/**
	 * Set the this object models the audio outputs of a telephony terminal.(ex. Handset, handsfree, ...)
	 *
	 * @param audio the input value
	 * @return this instance
	 */
	public Terminal withAudio(Audio audio) {
		getAudios().add(audio);
		return this;
	}

	/**
	 * Get the this object is provided to permit the purpose of the CPE buttons and function keys to be defined via the ACS.

Support of this object is appropriate only for a device that has programmable buttons in its user interface.
	 *
	 * @return the value
	 */
	public ButtonMap getButtonMap() {
		return buttonMap;
	}

	/**
	 * Set the this object is provided to permit the purpose of the CPE buttons and function keys to be defined via the ACS.

Support of this object is appropriate only for a device that has programmable buttons in its user interface.
	 *
	 * @param buttonMap the input value
	 */
	public void  setButtonMap(ButtonMap buttonMap) {
		this.buttonMap = buttonMap;
	}

	/**
	 * Set the this object is provided to permit the purpose of the CPE buttons and function keys to be defined via the ACS.

Support of this object is appropriate only for a device that has programmable buttons in its user interface.
	 *
	 * @param buttonMap the input value
	 * @return this instance
	 */
	public Terminal withButtonMap(ButtonMap buttonMap) {
		this.buttonMap = buttonMap;
		return this;
	}

	/**
	 * Get the this object defines the ring sequences that may be generated by the terminal.
	 *
	 * @return the value
	 */
	public Ringer getRinger() {
		return ringer;
	}

	/**
	 * Set the this object defines the ring sequences that may be generated by the terminal.
	 *
	 * @param ringer the input value
	 */
	public void  setRinger(Ringer ringer) {
		this.ringer = ringer;
	}

	/**
	 * Set the this object defines the ring sequences that may be generated by the terminal.
	 *
	 * @param ringer the input value
	 * @return this instance
	 */
	public Terminal withRinger(Ringer ringer) {
		this.ringer = ringer;
		return this;
	}

	/**
	 * Get the terminal level tests.
	 *
	 * @return the value
	 */
	public DiagTests getDiagTests() {
		return diagTests;
	}

	/**
	 * Set the terminal level tests.
	 *
	 * @param diagTests the input value
	 */
	public void  setDiagTests(DiagTests diagTests) {
		this.diagTests = diagTests;
	}

	/**
	 * Set the terminal level tests.
	 *
	 * @param diagTests the input value
	 * @return this instance
	 */
	public Terminal withDiagTests(DiagTests diagTests) {
		this.diagTests = diagTests;
		return this;
	}

	//</editor-fold>

}